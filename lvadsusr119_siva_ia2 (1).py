# -*- coding: utf-8 -*-
"""LVADSUSR119-siva-IA2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u2_5voV82ELGJUN6FxnzUibKf6BR7MEU
"""

# 1
import numpy as np
def rgb_to_grayscale(rgb_image):
    R, G, B = rgb_image[:, :, 0], rgb_image[:, :, 1], rgb_image[:, :, 2]
    grayscale_intensity = 0.2989 * R + 0.5870 * G + 0.1140 * B
    return grayscale_intensity
rgb_image = np.array([[[255, 0, 0], [0, 255, 0], [0, 0, 255]],[[255, 255, 0], [255, 0, 255], [0, 255, 255]],[[127, 127, 127], [200, 200, 200], [50, 50, 50]]])
grayscale_image = rgb_to_grayscale(rgb_image)
print(grayscale_image)

# 2
import numpy as np
def standardize_data(data):
    mean_values = np.mean(data, axis=0)
    std_values = np.std(data, axis=0)
    return mean_values,std_values
height = np.array([161, 174, 161, 178, 184])
weight = np.array([63, 74, 67, 69, 79])
age = np.array([31, 27, 29, 31, 23])
health_data = np.column_stack((height, weight, age))
standardized_health_data = standardize_data(health_data)
print(standardized_health_data)

# 3
import numpy as np
sensor_data = np.array([[[255,0,0],[0,255,0],[0,0,255]],[[255,255,0],[255,0,255],[0,255,255]],[[127,127,127],[200,200,200],[50,50,50]]])
num_sensors, rows, columns = sensor_data.shape
flattened_sensor_data = sensor_data.reshape(num_sensors, -1)
reshaped_data = flattened_sensor_data.reshape(num_sensors, -1)
print(reshaped_data)

# 4
import numpy as np

sports_data = np.array([[95, 82, 94, 97],  [79, 83, 81, 82],  [91, 94, 90, 98]])
first_game_score = sports_data[:, 0]
last_game_score = sports_data[:, -1]
improvement = last_game_score - first_game_score
improvement_percentage = (improvement / first_game_score) * 100
print(improvement_percentage)

# 5
import numpy as np
student_scores = np.array([[85, 90, 78,89],[92, 88, 80, 85],[91, 94, 95, 92]])
last_three_subjects = student_scores[:, -3:]
last_three_subjects[last_three_subjects == -1] = np.nan
average_scores = np.nanmean(last_three_subjects, axis=1)
for i, avg_score in enumerate(average_scores):
    print((avg_score))

# 7
import pandas as pd
#due to time contraint,I inputed only few values
data = {
    "Name": ["Alice", "Bob", "Charlie"],
    "Age": [25,30,35],
    "City": ["New York", "Los Angeles", "Chicago"],
    "Department": ["HR", "IT", "Finance"]
}

employee_df = pd.DataFrame(data)
filtered_employees = employee_df[(employee_df["Age"] < 45) & (employee_df["Department"] != "HR")]
employee_list = filtered_employees[["Name", "City"]]
print(employee_list)

# 8
import pandas as pd
data = {
    "Product": ["Apples", "Bananas", "Cherries", "Dates", "Elderberries", "Grapes"],
    "Category": ["Fruit", "Fruit", "Fruit", "Fruit", "Fruit", "Fruit"],
    "Price": [1.20, 0.50, 3.00, 2.50, 4.00, 2.00],
    "Promotion": [True, False, True, True, False, False]
}
df = pd.DataFrame(data)
average_fruit_price = df[df["Category"] == "Fruit"]["Price"].mean()
potential_candidates = df[(df["Category"] == "Fruit") & (df["Price"] > average_fruit_price) & (~df["Promotion"])]
name = potential_candidates["Product"]
price = potential_candidates["Price"]
for name, price in zip(name, price):
    print(name,price)

# 9
#writing main logic
import pandas as pd
merged_data = pd.merge('Employee_data','Project_data', on='Employee')
print(merged_data)

# 10
#main logic
import pandas as pd
df = pd.DataFrame(data)
avg_sale = df.groupby('Department')['Sales'].mean()